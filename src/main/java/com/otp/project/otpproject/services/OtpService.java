package com.otp.project.otpproject.services;

import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.UUID;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.otp.project.otpproject.configs.ApplicationConfig;
import com.otp.project.otpproject.dto.OtpRequestDTO;
import com.otp.project.otpproject.dto.OtpResponseDTO;
import com.otp.project.otpproject.entities.MfaValidation;
import com.otp.project.otpproject.exceptions.InvalidOtpException;
import com.otp.project.otpproject.repositories.MfaValidationRepsitory;
import com.otp.project.otpproject.utlis.EmailUtil;
import com.otp.project.otpproject.utlis.GenerateOtpUtil;

import jakarta.mail.MessagingException;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class OtpService {

	private final JwtService jwtService;

	private final GenerateOtpUtil generateOtpUtil;

	private final EmailUtil emailUtil;

	private final MfaValidationRepsitory mfaValidationRepsitory;

	private final PasswordEncoder passwordEncoder;

	private final ApplicationConfig applicationConfig;

	public OtpResponseDTO generateOtp(String authorizationHeader) throws MessagingException {

		// extracting bearer token from auth header
		String token = authorizationHeader.substring(7);

		if (token.length() == 0 || jwtService.isTokenExpired(token)) {
			throw new InvalidOtpException("Unauthorized access, generate a new token");
		}

		// extracting claim email from token
		String email = jwtService.extractUserEmail(token);

		// generating otp
		String otp = generateOtpUtil.generateOtp();

		// hashing otp before saving to db
		String hashedOtp = passwordEncoder.encode(otp);

		// calling java mailer to send mail
		emailUtil.sendOtpEmail(email, otp);

		// setting up response
		OtpResponseDTO otpResponseDTO = new OtpResponseDTO();
		otpResponseDTO.setMessage("OTP sent to registered email, use this request ID to validate OTP, OTP valid "
				+ "for 5 minutes only.");

		mfaValidationRepsitory.markPreviousOtpInactive(email);

		// saving data to database
		MfaValidation mfaValidation = new MfaValidation();
		mfaValidation.setActive(true);
		mfaValidation.setUserEmail(email);
		mfaValidation.setOtp(hashedOtp);
		mfaValidation.onCreate(applicationConfig.getOtpExpirationTimeInMinutes());
		mfaValidationRepsitory.save(mfaValidation);

		otpResponseDTO.setRequestId(mfaValidation.getUuid());

		// return the response
		return otpResponseDTO;

	}

	// testing route
	public OtpResponseDTO validateOtpAndDownloadDocument(OtpRequestDTO otpRequestDTO, HttpServletResponse response)
			throws InvalidOtpException, IOException {

		// get the entered otp
		int otp = otpRequestDTO.getOtp();
		UUID requestId = otpRequestDTO.getRequestId();

		// parse int otp to string
		String otpString = String.valueOf(otp);

		// getting a list of otps generated by the user
		MfaValidation mfaValidation = mfaValidationRepsitory.getActiveOtp(requestId);

		// creating unique UUID for the otp generated-

		// create new response object
		OtpResponseDTO otpResponseDTO = new OtpResponseDTO();

		// matching the entered otp with the hashed otp saved in db
		if (passwordEncoder.matches(otpString, mfaValidation.getOtp())) {
			// checking otp expiration
			if (mfaValidation.getExpiryAt().getTime() <= Timestamp.from(Instant.now()).getTime()) {
				throw new InvalidOtpException("OTP expired, please generate a new one");
			} else {
				// if everything passes, otp matches
				mfaValidation.setValidatedAt(Timestamp.from(Instant.now()));
				mfaValidation.setActive(false);
				mfaValidationRepsitory.save(mfaValidation);
				otpResponseDTO.setMessage("otp validated, download will start soon");

				// Replace "your-document-url" with the actual URL of the document you want to download
				String documentUrl = "https://onlinetestcase.com/wp-content/uploads/2023/06/500-KB.pdf";

				// Open a connection to the document URL
				URL url = new URL(documentUrl);
				URLConnection connection = url.openConnection();

				// Set the response headers
				response.setContentType(connection.getContentType());
				response.setContentLengthLong(connection.getContentLengthLong());
				response.setHeader("Content-Disposition", "attachment; filename=\"document.pdf\"");

				// Copy the content from the document URL to the response output stream
				connection.getInputStream().transferTo(response.getOutputStream());
				response.flushBuffer();
				return otpResponseDTO;

			}
		} else {
			throw new InvalidOtpException("Wrong OTP entered ");
		}

	}

	public OtpResponseDTO validateOtp(OtpRequestDTO otpRequestDTO) throws InvalidOtpException {

		// get the entered otp
		int otp = otpRequestDTO.getOtp();
		UUID requestId = otpRequestDTO.getRequestId();

		// parse int otp to string
		String otpString = String.valueOf(otp);

		// getting a list of otps generated by the user
		MfaValidation mfaValidation = mfaValidationRepsitory.getActiveOtp(requestId);

		if (mfaValidation == null) {
			throw new InvalidOtpException("OTP already validated or expired, please generate a new one");
		}

		// create new response object
		OtpResponseDTO otpResponseDTO = new OtpResponseDTO();

		// matching the entered otp with the hashed otp saved in db
		if (passwordEncoder.matches(otpString, mfaValidation.getOtp())) {
			// checking otp expiration
			if (mfaValidation.getExpiryAt().getTime() <= Timestamp.from(Instant.now()).getTime()) {
				mfaValidation.setActive(false);
				mfaValidationRepsitory.save(mfaValidation);
				throw new InvalidOtpException("OTP expired, please generate a new one");
			} else {
				// if everything passes, otp matches
				mfaValidation.setValidatedAt(Timestamp.from(Instant.now()));
				mfaValidation.setActive(false);
				otpResponseDTO.setMessage("otp validated, download will start soon");
				otpResponseDTO.setRequestId(mfaValidation.getUuid());
				mfaValidationRepsitory.save(mfaValidation);
				return otpResponseDTO;

			}
		} else {
			throw new InvalidOtpException("Wrong OTP entered");
		}

	}

}
