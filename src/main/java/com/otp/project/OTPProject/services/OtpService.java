package com.otp.project.OTPProject.services;

import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.otp.project.OTPProject.DTO.OtpRequestDTO;
import com.otp.project.OTPProject.DTO.OtpResponseDTO;
import com.otp.project.OTPProject.entities.MfaValidation;
import com.otp.project.OTPProject.exceptions.InvalidOtpException;
import com.otp.project.OTPProject.repositories.MfaValidationRepsitory;
import com.otp.project.OTPProject.utlis.EmailUtil;
import com.otp.project.OTPProject.utlis.GenerateOtpUtil;

import jakarta.mail.MessagingException;
import jakarta.servlet.http.HttpServletResponse;

@Service
public class OtpService {

	@Autowired
	JwtService jwtService;

	@Autowired
	GenerateOtpUtil generateOtpUtil;

	@Autowired
	EmailUtil emailUtil;

	@Autowired
	MfaValidationRepsitory mfaValidationRepsitory;

	public OtpResponseDTO generateOtp(String authorizationHeader) {

		try {
			// extracting bearer token from auth header
			String token = authorizationHeader.substring(7);

			// extracting claim email from token
			String email = jwtService.extractUserEmail(token);

			// generating otp
			String otp = generateOtpUtil.generateOtp();

			// calling java mailer to send mail
			emailUtil.sendOtpEmail(email, otp);

			// setting up response
			OtpResponseDTO otpResponseDTO = new OtpResponseDTO();
			otpResponseDTO.setMessage("otp sent to registered email");

			// saving data to database
			MfaValidation mfaValidation = new MfaValidation();
			mfaValidation.setUserEmail(email);
			mfaValidation.setOtp(Integer.parseInt(otp));
			mfaValidationRepsitory.save(mfaValidation);

			// return the response
			return otpResponseDTO;
		} catch (MessagingException e) {
			throw new RuntimeException("Unable to send otp, please try again");
		}
	}

	public OtpResponseDTO validateOtpAndDownloadDocument(String authorizationHeader, OtpRequestDTO otpRequestDTO,
			HttpServletResponse response) throws InvalidOtpException, IOException {

		// get the entered otp
		int otp = otpRequestDTO.getOtp();

		// extract token from auth header
		String token = authorizationHeader.substring(7);

		// extracting claim email from token
		String email = jwtService.extractUserEmail(token);

		// getting a list of otps generated by the user
		List<MfaValidation> listMfaValidationList = mfaValidationRepsitory.getOtpList(email);

		// flag for marking wrong otp
		boolean flag = false;

		// created response object
		OtpResponseDTO otpResponseDTO = new OtpResponseDTO();

		// iterating over list of otps
		for (MfaValidation otpObject : listMfaValidationList) {

			if (otpObject.getOtp() == otp) {
				// checking otp expiration
				if (otpObject.getExpiryAt().getTime() <= Timestamp.from(Instant.now()).getTime()) {
					throw new InvalidOtpException("OTP expired, please generate a new one");
				} else {
					// if everything passes, otp matches
					otpObject.setValidatedAt(Timestamp.from(Instant.now()));
					mfaValidationRepsitory.save(otpObject);
					otpResponseDTO.setMessage("otp validated, download will start soon");

					// marking flag as true, indicating we have got atleast one correct otp
					flag = true;

				}
			}
		}
		// if flag comes out to be false, indicates we haven't got any correct otp, hence it is wrong
		if (flag == false) {
			throw new InvalidOtpException("Wrong OTP entered");
		}

		// otherwise return the response
		// Replace "your-document-url" with the actual URL of the document you want to download
		String documentUrl = "https://onlinetestcase.com/wp-content/uploads/2023/06/500-KB.pdf";

		// Open a connection to the document URL
		URL url = new URL(documentUrl);
		URLConnection connection = url.openConnection();

		// Set the response headers
		response.setContentType(connection.getContentType());
		response.setContentLengthLong(connection.getContentLengthLong());
		response.setHeader("Content-Disposition", "attachment; filename=\"document.pdf\"");

		// Copy the content from the document URL to the response output stream
		connection.getInputStream().transferTo(response.getOutputStream());

		// Flush and close the response output stream
		response.flushBuffer();
		return otpResponseDTO;

	}

}
